{"version":3,"sources":["logo.svg","components/searchbar/searchbar.js","components/videolistitem/videolistitem.js","components/videolist/videolist.js","components/videodetail/videodetail.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","SearchBar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","term","setState","onSearchTermChange","_this2","react_default","a","createElement","id","value","onChange","event","onInputChange","target","Component","VideoListItem","_ref","video","onVideoSelect","imageURL","snippet","thumbnails","default","url","onClick","className","src","title","VideoList","videoItems","videos","map","videolistitem","key","etag","VideoDetail","videoID","videoId","concat","description","App","selectedVideo","videoSearch","YTSearch","_this3","_","debounce","searchbar","videodetail","videolist","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,8KC0BzBC,2BAtBf,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAO,CAAEC,KAAM,IAHLR,6EAMLQ,GACVL,KAAKM,SAAS,CAACD,SACfL,KAAKJ,MAAMW,mBAAmBF,oCAG1B,IAAAG,EAAAR,KACJ,OACIS,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,SAAOC,GAAG,YACVC,MAAOb,KAAKI,MAAMC,KAClBS,SAAU,SAAAC,GAAK,OAAIP,EAAKQ,cAAcD,EAAME,OAAOJ,kBAlBvCK,cCkBTC,EAlBO,SAAAC,GAA2B,IAAzBC,EAAyBD,EAAzBC,MAAOC,EAAkBF,EAAlBE,cAErBC,EAAWF,EAAMG,QAAQC,WAAWC,QAAQC,IAElD,OACAlB,EAAAC,EAAAC,cAAA,MAAIiB,QAAS,kBAAMN,EAAcD,IAAQQ,UAAU,mBACnDpB,EAAAC,EAAAC,cAAA,OAAKkB,UAAU,oBACXpB,EAAAC,EAAAC,cAAA,OAAKkB,UAAU,cACXpB,EAAAC,EAAAC,cAAA,OAAKkB,UAAU,eAAeC,IAAKP,KAEvCd,EAAAC,EAAAC,cAAA,OAAKkB,UAAU,cACXpB,EAAAC,EAAAC,cAAA,OAAKkB,UAAU,iBAAiBR,EAAMG,QAAQO,WCQ3CC,EAlBG,SAAApC,GAEd,IAAMqC,EAAarC,EAAMsC,OAAOC,IAAI,SAACd,GACjC,OACKZ,EAAAC,EAAAC,cAACyB,EAAD,CACAd,cAAe1B,EAAM0B,cACrBe,IAAKhB,EAAMiB,KACXjB,MAAOA,MAIhB,OACIZ,EAAAC,EAAAC,cAAA,MAAIkB,UAAU,wBACTI,ICQEM,EAtBK,SAAAnB,GAAa,IAAXC,EAAWD,EAAXC,MAElB,IAAKA,EACD,OAAOZ,EAAAC,EAAAC,cAAA,yBAGf,IAAM6B,EAAUnB,EAAMT,GAAG6B,QACnBd,EAAG,iCAAAe,OAAoCF,GAEzC,OACA/B,EAAAC,EAAAC,cAAA,OAAKkB,UAAU,0BACXpB,EAAAC,EAAAC,cAAA,OAAKkB,UAAU,2CACXpB,EAAAC,EAAAC,cAAA,UAAQkB,UAAU,wBAAwBC,IAAKH,KAEnDlB,EAAAC,EAAAC,cAAA,OAAKkB,UAAU,WACXpB,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,SAAIU,EAAMG,QAAQO,QACvBtB,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,SAAIU,EAAMG,QAAQmB,mDC+CpBC,cAlDb,SAAAA,EAAYhD,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA4C,IACjB/C,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA8C,GAAAzC,KAAAH,KAAMJ,KAEDQ,MAAQ,CACX8B,OAAQ,GACRW,cAAe,MAEjBhD,EAAKiD,YAAY,kBAPAjD,2EAUPQ,GAAK,IAAAG,EAAAR,KACf+C,IAAS,CAACV,IAfE,0CAeYhC,KAAMA,GAAO,SAAA6B,GACnC1B,EAAKF,SAAS,CACX4B,OAAQA,EACRW,cAAeX,EAAO,wCAKpB,IAAAc,EAAAhD,KACD8C,EAAcG,IAAEC,SAAS,SAAC7C,GAAU2C,EAAKF,YAAYzC,IAAQ,KAEnE,OACEI,EAAAC,EAAAC,cAAA,OAAKkB,UAAU,OACbpB,EAAAC,EAAAC,cAAA,UAAQkB,UAAU,cAChBpB,EAAAC,EAAAC,cAAA,OAAKkB,UAAU,aACfpB,EAAAC,EAAAC,cAAA,QAAMC,GAAG,UAAT,MAA2BH,EAAAC,EAAAC,cAAA,QAAMC,GAAG,UAAT,SACzBH,EAAAC,EAAAC,cAAA,OAAKkB,UAAU,OACfpB,EAAAC,EAAAC,cAAA,OAAKkB,UAAU,aACdpB,EAAAC,EAAAC,cAACwC,EAAD,CAAW5C,mBAAoBuC,MAG/BrC,EAAAC,EAAAC,cAAA,WACDF,EAAAC,EAAAC,cAAA,OAAKkB,UAAU,OACfpB,EAAAC,EAAAC,cAAA,OAAKkB,UAAU,YACfpB,EAAAC,EAAAC,cAACyC,EAAD,CAAa/B,MAAOrB,KAAKI,MAAMyC,iBAE/BpC,EAAAC,EAAAC,cAAA,OAAKkB,UAAU,YACfpB,EAAAC,EAAAC,cAAC0C,EAAD,CACE/B,cAAe,SAAAuB,GAAa,OAAIG,EAAK1C,SAAS,CAACuC,mBAC/CX,OAAQlC,KAAKI,MAAM8B,qBA1CfhB,aCDEoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnD,EAAAC,EAAAC,cAACkD,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.1fad7749.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\n\r\nclass SearchBar extends Component {\r\n\r\nconstructor(props) {\r\n    super(props); \r\n    \r\n    this.state= { term: ''};\r\n}\r\n\r\nonInputChange(term){\r\n    this.setState({term});\r\n    this.props.onSearchTermChange(term);\r\n}\r\n\r\nrender(){\r\n    return( \r\n        <div>\r\n            <input id='searchbar' \r\n            value={this.state.term}\r\n            onChange={event => this.onInputChange(event.target.value)} />\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SearchBar;","import React from 'react';\r\n\r\nconst VideoListItem = ({video, onVideoSelect}) =>{\r\n\r\n    const imageURL = video.snippet.thumbnails.default.url;\r\n\r\n    return(\r\n    <li onClick={() => onVideoSelect(video)} className='list-group-item'>\r\n    <div className='video-list media'>\r\n        <div className='media-left'>\r\n            <img className='media-object' src={imageURL} />\r\n        </div>\r\n        <div className='media-body'>\r\n            <div className='media-heading'>{video.snippet.title}</div>\r\n        </div>\r\n    </div>\r\n    </li>\r\n    )\r\n}\r\n\r\nexport default VideoListItem;","import React from 'react';\r\nimport VideoListItem from '../videolistitem/videolistitem';\r\n\r\nconst VideoList = props => {\r\n    \r\n    const videoItems = props.videos.map((video)=>{\r\n        return(\r\n             <VideoListItem \r\n             onVideoSelect={props.onVideoSelect}\r\n             key={video.etag} \r\n             video={video} />\r\n        )\r\n     });\r\n\r\n    return(\r\n        <ul className='col-md-12 list-group'>\r\n            {videoItems}\r\n        </ul>\r\n    );\r\n};\r\n\r\nexport default VideoList;","import React from 'react';\r\n\r\nconst VideoDetail = ({video}) => {\r\n\r\n    if (!video) {\r\n        return <div>Loading...</div>;\r\n    }\r\n\r\nconst videoID = video.id.videoId;\r\nconst url = `https://www.youtube.com/embed/${videoID}`;\r\n\r\n    return(\r\n    <div className='video-detail col-md-12'>\r\n        <div className='embed-responsive embed-responsive-16by9'>\r\n            <iframe className='embed-responsive-item' src={url}></iframe>\r\n        </div>\r\n        <div className='details'>\r\n            <div><p>{video.snippet.title}</p></div>\r\n            <div><p>{video.snippet.description}</p></div>\r\n        </div>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default VideoDetail;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport SearchBar from './components/searchbar/searchbar';\nimport VideoList from './components/videolist/videolist';\nimport VideoDetail from './components/videodetail/videodetail'\n\nimport YTSearch from 'youtube-api-search';\nimport _ from 'lodash';\n\nconst API_KEY = 'AIzaSyD7IkI0964gt1mLmAj9lcG53ISAyJ9meSQ';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = { \n      videos: [],\n      selectedVideo: null\n    };\n    this.videoSearch('World of Tanks');\n  }\n\n  videoSearch(term){\n    YTSearch({key: API_KEY, term: term}, videos => {\n      this.setState({\n         videos: videos,\n         selectedVideo: videos[0] \n        });\n    })\n  }\n\n  render() {\n    const videoSearch = _.debounce((term) => {this.videoSearch(term)}, 300);\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <div className='container'>\n          <span id='title1'>Me</span><span id='title2'>Tube!</span> \n            <div className='row'>\n            <div className='col-md-12'>\n             <SearchBar onSearchTermChange={videoSearch}/> \n             </div>\n             </div>\n             <br />\n            <div className='row'>\n            <div className='col-md-8'>\n            <VideoDetail video={this.state.selectedVideo} />\n            </div>\n            <div className='col-md-4'>\n            <VideoList\n              onVideoSelect={selectedVideo => this.setState({selectedVideo})}\n              videos={this.state.videos} />\n            </div>\n           </div>\n        </div> \n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}